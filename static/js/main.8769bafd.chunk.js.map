{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","allData","setAllData","selectedData","setSelectedData","counties","setCounties","cities","setCities","selectedCities","setSelectedCities","county","setCounty","categories","setCategories","useEffect","filter","datum","map","label","city","value","find","options","colors","chart","type","series","xaxis","tooltip","y","title","formatter","seriesName","seriesIndex","split","legend","show","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","rows","data","years","newCounties","newCities","row","index","push","County","trim","City","Object","keys","key","isYear","uniq","getData","AppWrapper","QueryWrapper","FieldSet","onChange","e","target","countyChoice","isMulti","styles","container","provided","width","val","placeholder","styled","div","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8769bafd.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport Papa from \"papaparse\";\nimport { uniq } from \"lodash\";\nimport Select, { ValueType, OptionTypeBase } from \"react-select\";\nimport styled from \"styled-components\";\n\ntype SeriesObject = {\n  city: string;\n  data: number[];\n  county: string;\n};\n\ntype OptionType = {\n  value: string;\n  label: string;\n};\n\nfunction App() {\n  const [allData, setAllData] = React.useState<SeriesObject[]>([]);\n  const [selectedData, setSelectedData] = React.useState<SeriesObject[]>([]);\n  const [counties, setCounties] = React.useState<string[]>([]);\n  const [cities, setCities] = React.useState<OptionType[]>([]);\n  const [selectedCities, setSelectedCities] = React.useState<\n    ValueType<OptionTypeBase>\n  >([]);\n  const [county, setCounty] = React.useState<string>(\"Marin\");\n  const [categories, setCategories] = React.useState<string[]>([]);\n\n  useEffect(() => {\n    setSelectedCities(\n      allData\n        .filter((datum) => datum.county === county)\n        .map((datum) => ({\n          label: datum.city,\n          value: datum.city,\n        }))\n    );\n  }, [allData, county]);\n\n  useEffect(() => {\n    setSelectedData(\n      allData.filter((datum) =>\n        selectedCities?.find(\n          (city: { label: any }) => city.label === datum.city\n        )\n      )\n    );\n  }, [selectedCities, allData]);\n\n  const options = {\n    colors: [\n      \"#528b8b\",\n      \"#eea2ad\",\n      \"#eed8ae\",\n      \"#8b3626\",\n      \"#d8bfd8\",\n      \"#6ca6cd\",\n      \"#cd6839\",\n      \"#bbffff\",\n      \"#daa520\",\n      \"#b4eeb4\",\n      \"#9bcd9b\",\n    ],\n    chart: {\n      type: \"line\",\n    },\n    series: selectedData,\n    xaxis: {\n      categories,\n    },\n    tooltip: {\n      y: {\n        title: {\n          formatter: (seriesName: string, options: any) => {\n            const seriesIndex = +seriesName.split(\"-\")[1];\n            return selectedData[seriesIndex - 1]?.city;\n          },\n        },\n      },\n    },\n    legend: { show: false },\n  };\n\n  React.useEffect(() => {\n    async function getData() {\n      const response = await fetch(\"/data/per-cap.csv\");\n      const reader = response.body?.getReader();\n      const result = await reader?.read(); // raw array\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result?.value); // the csv text\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\n      const rows = results.data as any[]; // array of objects\n      const years: string[] = [];\n      const newCounties: string[] = [];\n      const newCities: string[] = [];\n      setAllData(\n        rows.map((row, index) => {\n          newCounties.push(row.County?.trim());\n          newCities.push(row.City?.trim());\n          const data = Object.keys(row)\n            .filter((key: string) => {\n              const isYear = !(key === \"City\" || key === \"County\");\n              if (isYear && index === 0) {\n                years.push(key.trim());\n              }\n              return isYear;\n            })\n            .map((key) => {\n              return +row[key];\n            });\n          return {\n            city: row.City.trim(),\n            county: row.County?.trim(),\n            data,\n          };\n        })\n      );\n      setCounties(uniq(newCounties));\n      setCities(uniq(newCities).map((city) => ({ value: city, label: city })));\n      setCategories(years);\n    }\n    getData();\n  }, []); // [] means just do this once, after initial render\n\n  const onSelectCities = (val: ValueType<OptionTypeBase>) => {\n    setSelectedCities(val);\n  };\n\n  return (\n    <AppWrapper>\n      <QueryWrapper>\n        <FieldSet>\n          <label>County:</label>\n          <select\n            value={county}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setCounty(e.target.value)\n            }\n          >\n            {counties.map((countyChoice) => (\n              <option value={countyChoice}>{countyChoice}</option>\n            ))}\n          </select>\n        </FieldSet>\n        <Select\n          value={selectedCities}\n          isMulti\n          styles={{\n            container: (provided) => ({\n              ...provided,\n              width: \"30rem\",\n            }),\n          }}\n          options={cities}\n          onChange={onSelectCities}\n          placeholder=\"choose cities\"\n        />\n      </QueryWrapper>\n      <Chart\n        options={options}\n        width=\"1000\"\n        type=\"line\"\n        series={options.series}\n      />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n\nconst FieldSet = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  label {\n    margin-bottom: 0.4rem;\n  }\n`;\n\nconst QueryWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n\n  > * {\n    margin-right: 2rem;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}